<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>效果</title>
    <script src="libs/dat.gui.min.js"></script>
    <script src="libs/Cesium/Cesium.js"></script>
    <link href="libs/Cesium/Widgets/widgets.css" rel="stylesheet" />
    <style>
      html,
      body {
        height: 100%;
      }

      * {
        margin: 0;
        padding: 0;
      }
    </style>
  </head>
  <body>
    <div id="cesiumContainer" style="width: 100%; height: 100%"></div>
    <script src="libs/CesiumPlugin/cesium-plugin.js"></script>
    <script>
      const viewer = new CesiumPlugin.Viewer("cesiumContainer");
      viewer.scene.primitives.add(Cesium.createOsmBuildings());
      // Create the circle geometry.
      var circleGeometry = new Cesium.CircleGeometry({
        center: Cesium.Cartesian3.fromDegrees(-74.02, 40.69),
        radius: 200.0,
        vertexFormat: Cesium.VertexFormat.POSITION_AND_ST,
      });
      var instance = new Cesium.GeometryInstance({
        geometry: circleGeometry,
      });
      const appearance = new Cesium.MaterialAppearance({
        material: Cesium.Material.fromType(Cesium.Material.CircleRingFlowType, {
          color: new Cesium.Color(0.0, 1.0, 0.0),
          percent: 0.05,
          speed: 3.0,
        }),
      });
      var primitive = viewer.scene.primitives.add(
        new Cesium.GroundPrimitive({
          geometryInstances: instance,
          appearance: appearance,
        })
      );
      viewer.camera.flyToBoundingSphere(
        Cesium.CircleGeometry.createGeometry(circleGeometry).boundingSphere
      );

      function _getCircleImage() {
        let canvas = document.createElement("canvas");
        canvas.width = 512;
        canvas.height = 512;
        let ctx = canvas.getContext("2d");
        ctx.fillStyle = "rgba(255,255,255,0)";
        ctx.strokeStyle = "rgba(255, 255, 255,255)";
        ctx.setLineDash([50, 50]);
        ctx.lineWidth = 30;
        ctx.beginPath();
        ctx.arc(256, 256, 150, 0, Math.PI * 2, true);
        ctx.stroke();
        ctx.restore();
        return canvas;
      }
      let circleMaterial = { type: "CircleRingFlowType" };
      const gui = new dat.GUI();
      const f = gui.addFolder("材质类型");
      f.add(circleMaterial, "type", [
        "CircleRingFlowType",
        "CircleRadarScanType",
        "CircleRadarSweepType",
        "CircleRadarWaveType",
        "CircleRadarLineType",
        "CircleBlurType",
        "CircleDiffuseType",
        "CircleFadeType",
        "CirclePulseType",
        "CircleRingType",
        "CircleRotateType",
        "CircleScanType",
        "CircleSpiralType",
        "CircleVaryType",
        "CircleWaveType",
      ]).onChange((value) => {
        switch (value) {
          case "CircleRingFlowType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleRingFlowType,
                {
                  color: new Cesium.Color(0.0, 1.0, 0.0),
                  percent: 0.05,
                  speed: 3.0,
                }
              ),
            });
            break;
          case "CircleRadarScanType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleRadarScanType,
                {
                  color: new Cesium.Color(0.0, 1.0, 0.0),
                  rotate: 90.0,
                  percent: 0.1,
                }
              ),
            });
            break;
          case "CircleRadarSweepType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleRadarSweepType,
                {
                  color: new Cesium.Color(1.0, 1.0, 0.0),
                  speed: 3.0,
                }
              ),
            });
            break;
          case "CircleRadarWaveType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleRadarWaveType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0),
                  speed: 2.0,
                }
              ),
            });
            break;
          case "CircleRadarLineType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleRadarLineType,
                {
                  color: new Cesium.Color(1.0, 1.0, 1.0),
                  speed: 2.0,
                }
              ),
            });
            break;
          case "CircleBlurType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleBlurType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  speed: 3.0,
                }
              ),
            });
            break;
          case "CircleDiffuseType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleDiffuseType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  speed: 3.0,
                }
              ),
            });
            break;
          case "CircleFadeType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleFadeType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  speed: 3.0,
                }
              ),
            });
            break;
          case "CirclePulseType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CirclePulseType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  speed: 3.0,
                }
              ),
            });
            break;
          case "CircleRingType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleRingType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                }
              ),
            });
            break;
          case "CircleRotateType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleRotateType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  image: _getCircleImage(),
                }
              ),
            });
            break;
          case "CircleScanType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleScanType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  speed: 1,
                }
              ),
            });
            break;
          case "CircleSpiralType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleSpiralType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  speed: 3.0,
                }
              ),
            });
            break;
          case "CircleVaryType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleVaryType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  speed: 3.0,
                }
              ),
            });
            break;
          case "CircleWaveType":
            primitive.appearance = new Cesium.MaterialAppearance({
              material: Cesium.Material.fromType(
                Cesium.Material.CircleWaveType,
                {
                  color: new Cesium.Color(1.0, 0.0, 0.0, 0.7),
                  speed: 3.0,
                  count: 1,
                  gradient: 0.1,
                }
              ),
            });
            break;
        }
      });
    </script>
  </body>
</html>
