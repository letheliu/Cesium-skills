<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>效果</title>
    <script src="libs/Cesium/Cesium.js"></script>
    <link
      href="libs/Cesium/Widgets/widgets.css"
      rel="stylesheet"
    />
    <style>
      html,
      body {
        height: 100%;
      }

      * {
        margin: 0;
        padding: 0;
      }
    </style>
  </head>
  <body>
    <div id="cesiumContainer" style="width: 100%; height: 100%"></div>
    <script src="libs/CesiumPlugin/cesium-plugin.js"></script>
    <script>
      const viewer = new CesiumPlugin.Viewer("cesiumContainer");
      function computeCircle(radius) {
        var positions = []
        for (var i = 0; i < 360; i++) {
          var radians = Cesium.Math.toRadians(i)
          positions.push(
            new Cesium.Cartesian2(
              radius * Math.cos(radians),
              radius * Math.sin(radians)
            )
          )
        }
        return positions
      }
      var geometry = new Cesium.PolylineVolumeGeometry({
        polylinePositions: Cesium.Cartesian3.fromDegreesArray([
          -85.0,
          32.0,
          -85.0,
          36.0,
          -89.0,
          36.0,
        ]),
        vertexFormat: Cesium.VertexFormat.POSITION_NORMAL_AND_ST,
        shapePositions: computeCircle(6000.0),
        cornerType: Cesium.CornerType.MITERED,
      })

      // Add all instances to primitives.
      var primitive = viewer.scene.primitives.add(
        new Cesium.Primitive({
          geometryInstances: new Cesium.GeometryInstance({
            geometry: geometry,
          }),
          appearance: new Cesium.MaterialAppearance({
            material: Cesium.Material.fromType(
                  Cesium.Material.PolylineRepeatType,
                  {
                    speed: 1,
                    color: new Cesium.Color(1.0, 0.0, 0.0, 1.0),
                    percent: 0.1,
                    gradient: 0.2,
                  }
                ),
          }),
        })
      )

      viewer.camera.flyToBoundingSphere(
        Cesium.PolylineVolumeGeometry.createGeometry(geometry).boundingSphere
      )

      viewer.scene.preUpdate.addEventListener(function() {
        var offset = primitive.appearance.material.uniforms.offset
        offset += 0.001
        if (offset > 1.0) {
          offset = 0.0
        }
        primitive.appearance.material.uniforms.offset = offset
      })
    </script>
  </body>
</html>
