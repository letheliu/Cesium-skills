<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>效果</title>
    <script src="libs/Cesium/Cesium.js"></script>
    <link href="libs/Cesium/Widgets/widgets.css" rel="stylesheet" />
    <style>
      html,
      body {
        height: 100%;
      }

      * {
        margin: 0;
        padding: 0;
      }
    </style>
  </head>
  <body>
    <div id="cesiumContainer" style="width: 100%; height: 100%"></div>
    <script src="libs/CesiumPlugin/cesium-plugin.js"></script>
    <script>
      const viewer = new CesiumPlugin.Viewer("cesiumContainer");
      const radii = new Cesium.Cartesian3(100.0, 100.0, 100.0);
      // Ellipsoid geometries are initially centered on the origin.
      // We can use a model matrix to position the ellipsoid on the
      // globe surface.
      const positionOnEllipsoid = Cesium.Cartesian3.fromDegrees(
        -122.4175,
        37.655
      );
      const modelMatrix = Cesium.Matrix4.multiplyByTranslation(
        Cesium.Transforms.eastNorthUpToFixedFrame(positionOnEllipsoid),
        new Cesium.Cartesian3(0.0, 0.0, 0),
        new Cesium.Matrix4()
      );
      // Create a ellipsoid geometry.
      const ellipsoidGeometry = new Cesium.EllipsoidGeometry({
        radii: radii,
      });
      // Create a geometry instance using the geometry
      // and model matrix created above.
      const ellipsoidInstance = new Cesium.GeometryInstance({
        geometry: ellipsoidGeometry,
        modelMatrix: modelMatrix,
      });
      // Add the geometry instance to primitives.
      viewer.scene.primitives.add(
        new Cesium.Primitive({
          geometryInstances: ellipsoidInstance,
          appearance: new Cesium.MaterialAppearance({
            material: Cesium.Material.fromType(
              Cesium.Material.EllipsoidElectricType,
              {
                color: new Cesium.Color(1.0, 0.5, 0.0, 1.0),
                speed: 10.0,
              }
            ),
          }),
        })
      );
      viewer.camera.flyTo({
        destination: Cesium.Cartesian3.fromDegrees(-122.4175, 37.655, 1000),
      });
    </script>
  </body>
</html>
